### YamlMime:ManagedReference
items:
- uid: RhythmTool.ObstacleTrack
  commentId: T:RhythmTool.ObstacleTrack
  id: ObstacleTrack
  parent: RhythmTool
  children: []
  langs:
  - csharp
  - vb
  name: ObstacleTrack
  nameWithType: ObstacleTrack
  fullName: RhythmTool.ObstacleTrack
  type: Class
  source:
    id: ObstacleTrack
    path: ''
    startLine: 6157
  assemblies:
  - cs.temp.dll
  namespace: RhythmTool
  syntax:
    content: 'public class ObstacleTrack : Track<Obstacle>'
    content.vb: >-
      Public Class ObstacleTrack
          Inherits Track(Of Obstacle)
  inheritance:
  - System.Object
  - RhythmTool.Track
  - RhythmTool.Track{RhythmTool.Obstacle}
  inheritedMembers:
  - RhythmTool.Track{RhythmTool.Obstacle}.Item(System.Int32)
  - RhythmTool.Track{RhythmTool.Obstacle}.count
  - RhythmTool.Track{RhythmTool.Obstacle}.Add(RhythmTool.Obstacle)
  - RhythmTool.Track{RhythmTool.Obstacle}.Remove(RhythmTool.Obstacle)
  - RhythmTool.Track{RhythmTool.Obstacle}.Sort
  - RhythmTool.Track{RhythmTool.Obstacle}.GetFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetPrevIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetPrevFeature(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetNextIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetNextFeature(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(RhythmTool.Obstacle)
  - RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Obstacle}.Create(System.String)
  - RhythmTool.Track.name
  - RhythmTool.Track._name
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: RhythmTool
  commentId: N:RhythmTool
  name: RhythmTool
  nameWithType: RhythmTool
  fullName: RhythmTool
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: RhythmTool.Track
  commentId: T:RhythmTool.Track
  parent: RhythmTool
  name: Track
  nameWithType: Track
  fullName: RhythmTool.Track
- uid: RhythmTool.Track{RhythmTool.Obstacle}
  commentId: T:RhythmTool.Track{RhythmTool.Obstacle}
  parent: RhythmTool
  definition: RhythmTool.Track`1
  name: Track<Obstacle>
  nameWithType: Track<Obstacle>
  fullName: RhythmTool.Track<RhythmTool.Obstacle>
  nameWithType.vb: Track(Of Obstacle)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle)
  name.vb: Track(Of Obstacle)
  spec.csharp:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.Item(System.Int32)
  commentId: P:RhythmTool.Track{RhythmTool.Obstacle}.Item(System.Int32)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: Track<Obstacle>.Item[Int32]
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.Item[System.Int32]
  nameWithType.vb: Track(Of Obstacle).Item(Int32)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track<Obstacle>.Item
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track(Of Obstacle).Item
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.count
  commentId: P:RhythmTool.Track{RhythmTool.Obstacle}.count
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.count
  name: count
  nameWithType: Track<Obstacle>.count
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.count
  nameWithType.vb: Track(Of Obstacle).count
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).count
- uid: RhythmTool.Track{RhythmTool.Obstacle}.Add(RhythmTool.Obstacle)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.Add(RhythmTool.Obstacle)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.Add(`0)
  name: Add(Obstacle)
  nameWithType: Track<Obstacle>.Add(Obstacle)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.Add(RhythmTool.Obstacle)
  nameWithType.vb: Track(Of Obstacle).Add(Obstacle)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).Add(RhythmTool.Obstacle)
  spec.csharp:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track<Obstacle>.Add
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track(Of Obstacle).Add
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.Remove(RhythmTool.Obstacle)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.Remove(RhythmTool.Obstacle)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.Remove(`0)
  name: Remove(Obstacle)
  nameWithType: Track<Obstacle>.Remove(Obstacle)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.Remove(RhythmTool.Obstacle)
  nameWithType.vb: Track(Of Obstacle).Remove(Obstacle)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).Remove(RhythmTool.Obstacle)
  spec.csharp:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track<Obstacle>.Remove
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track(Of Obstacle).Remove
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.Sort
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.Sort
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.Sort
  name: Sort()
  nameWithType: Track<Obstacle>.Sort()
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.Sort()
  nameWithType.vb: Track(Of Obstacle).Sort()
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).Sort()
  spec.csharp:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track<Obstacle>.Sort
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track(Of Obstacle).Sort
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  name: GetFeatures(List<Obstacle>, Single, Single)
  nameWithType: Track<Obstacle>.GetFeatures(List<Obstacle>, Single, Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetFeatures(List<RhythmTool.Obstacle>, System.Single, System.Single)
  nameWithType.vb: Track(Of Obstacle).GetFeatures(List(Of Obstacle), Single, Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetFeatures(List(Of RhythmTool.Obstacle), System.Single, System.Single)
  name.vb: GetFeatures(List(Of Obstacle), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track<Obstacle>.GetFeatures
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track(Of Obstacle).GetFeatures
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingFeatures(List{RhythmTool.Obstacle},System.Single,System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  name: GetIntersectingFeatures(List<Obstacle>, Single, Single)
  nameWithType: Track<Obstacle>.GetIntersectingFeatures(List<Obstacle>, Single, Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIntersectingFeatures(List<RhythmTool.Obstacle>, System.Single, System.Single)
  nameWithType.vb: Track(Of Obstacle).GetIntersectingFeatures(List(Of Obstacle), Single, Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetIntersectingFeatures(List(Of RhythmTool.Obstacle), System.Single, System.Single)
  name.vb: GetIntersectingFeatures(List(Of Obstacle), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track<Obstacle>.GetIntersectingFeatures
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track(Of Obstacle).GetIntersectingFeatures
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetIndex(System.Single)
  name: GetIndex(Single)
  nameWithType: Track<Obstacle>.GetIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIndex(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track<Obstacle>.GetIndex
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track(Of Obstacle).GetIndex
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetPrevIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetPrevIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetPrevIndex(System.Single)
  name: GetPrevIndex(Single)
  nameWithType: Track<Obstacle>.GetPrevIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetPrevIndex(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetPrevIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetPrevIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track<Obstacle>.GetPrevIndex
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track(Of Obstacle).GetPrevIndex
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetPrevFeature(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetPrevFeature(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetPrevFeature(System.Single)
  name: GetPrevFeature(Single)
  nameWithType: Track<Obstacle>.GetPrevFeature(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetPrevFeature(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetPrevFeature(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetPrevFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track<Obstacle>.GetPrevFeature
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track(Of Obstacle).GetPrevFeature
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetNextIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetNextIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetNextIndex(System.Single)
  name: GetNextIndex(Single)
  nameWithType: Track<Obstacle>.GetNextIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetNextIndex(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetNextIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetNextIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track<Obstacle>.GetNextIndex
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track(Of Obstacle).GetNextIndex
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetNextFeature(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetNextFeature(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetNextFeature(System.Single)
  name: GetNextFeature(Single)
  nameWithType: Track<Obstacle>.GetNextFeature(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetNextFeature(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetNextFeature(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetNextFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track<Obstacle>.GetNextFeature
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track(Of Obstacle).GetNextFeature
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(RhythmTool.Obstacle)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetIndex(RhythmTool.Obstacle)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetIndex(`0)
  name: GetIndex(Obstacle)
  nameWithType: Track<Obstacle>.GetIndex(Obstacle)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIndex(RhythmTool.Obstacle)
  nameWithType.vb: Track(Of Obstacle).GetIndex(Obstacle)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetIndex(RhythmTool.Obstacle)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track<Obstacle>.GetIndex
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track(Of Obstacle).GetIndex
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Obstacle
    name: Obstacle
    nameWithType: Obstacle
    fullName: RhythmTool.Obstacle
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.GetIntersectingIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  name: GetIntersectingIndex(Single)
  nameWithType: Track<Obstacle>.GetIntersectingIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIntersectingIndex(System.Single)
  nameWithType.vb: Track(Of Obstacle).GetIntersectingIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).GetIntersectingIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track<Obstacle>.GetIntersectingIndex
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track(Of Obstacle).GetIntersectingIndex
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Obstacle}.Create(System.String)
  commentId: M:RhythmTool.Track{RhythmTool.Obstacle}.Create(System.String)
  parent: RhythmTool.Track{RhythmTool.Obstacle}
  definition: RhythmTool.Track`1.Create(System.String)
  name: Create(String)
  nameWithType: Track<Obstacle>.Create(String)
  fullName: RhythmTool.Track<RhythmTool.Obstacle>.Create(System.String)
  nameWithType.vb: Track(Of Obstacle).Create(String)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Obstacle).Create(System.String)
  spec.csharp:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track<Obstacle>.Create
    fullName: RhythmTool.Track<RhythmTool.Obstacle>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track(Of Obstacle).Create
    fullName: RhythmTool.Track(Of RhythmTool.Obstacle).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track.name
  commentId: P:RhythmTool.Track.name
  parent: RhythmTool.Track
  name: name
  nameWithType: Track.name
  fullName: RhythmTool.Track.name
- uid: RhythmTool.Track._name
  commentId: F:RhythmTool.Track._name
  parent: RhythmTool.Track
  name: _name
  nameWithType: Track._name
  fullName: RhythmTool.Track._name
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RhythmTool.Track`1
  commentId: T:RhythmTool.Track`1
  parent: RhythmTool
  name: Track<T>
  nameWithType: Track<T>
  fullName: RhythmTool.Track<T>
  nameWithType.vb: Track(Of T)
  fullName.vb: RhythmTool.Track(Of T)
  name.vb: Track(Of T)
  spec.csharp:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Item(System.Int32)
  commentId: P:RhythmTool.Track`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: Track<T>.Item[Int32]
  fullName: RhythmTool.Track<T>.Item[System.Int32]
  nameWithType.vb: Track(Of T).Item(Int32)
  fullName.vb: RhythmTool.Track(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track<T>.Item
    fullName: RhythmTool.Track<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track(Of T).Item
    fullName: RhythmTool.Track(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.count
  commentId: P:RhythmTool.Track`1.count
  name: count
  nameWithType: Track<T>.count
  fullName: RhythmTool.Track<T>.count
  nameWithType.vb: Track(Of T).count
  fullName.vb: RhythmTool.Track(Of T).count
- uid: RhythmTool.Track`1.Add(`0)
  commentId: M:RhythmTool.Track`1.Add(`0)
  name: Add(T)
  nameWithType: Track<T>.Add(T)
  fullName: RhythmTool.Track<T>.Add(T)
  nameWithType.vb: Track(Of T).Add(T)
  fullName.vb: RhythmTool.Track(Of T).Add(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track<T>.Add
    fullName: RhythmTool.Track<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track(Of T).Add
    fullName: RhythmTool.Track(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Remove(`0)
  commentId: M:RhythmTool.Track`1.Remove(`0)
  name: Remove(T)
  nameWithType: Track<T>.Remove(T)
  fullName: RhythmTool.Track<T>.Remove(T)
  nameWithType.vb: Track(Of T).Remove(T)
  fullName.vb: RhythmTool.Track(Of T).Remove(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track<T>.Remove
    fullName: RhythmTool.Track<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track(Of T).Remove
    fullName: RhythmTool.Track(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Sort
  commentId: M:RhythmTool.Track`1.Sort
  name: Sort()
  nameWithType: Track<T>.Sort()
  fullName: RhythmTool.Track<T>.Sort()
  nameWithType.vb: Track(Of T).Sort()
  fullName.vb: RhythmTool.Track(Of T).Sort()
  spec.csharp:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track<T>.Sort
    fullName: RhythmTool.Track<T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track(Of T).Sort
    fullName: RhythmTool.Track(Of T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  commentId: M:RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  isExternal: true
  name: GetFeatures(List<T>, Single, Single)
  nameWithType: Track<T>.GetFeatures(List<T>, Single, Single)
  fullName: RhythmTool.Track<T>.GetFeatures(List<T>, System.Single, System.Single)
  nameWithType.vb: Track(Of T).GetFeatures(List(Of T), Single, Single)
  fullName.vb: RhythmTool.Track(Of T).GetFeatures(List(Of T), System.Single, System.Single)
  name.vb: GetFeatures(List(Of T), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track<T>.GetFeatures
    fullName: RhythmTool.Track<T>.GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track(Of T).GetFeatures
    fullName: RhythmTool.Track(Of T).GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  commentId: M:RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  isExternal: true
  name: GetIntersectingFeatures(List<T>, Single, Single)
  nameWithType: Track<T>.GetIntersectingFeatures(List<T>, Single, Single)
  fullName: RhythmTool.Track<T>.GetIntersectingFeatures(List<T>, System.Single, System.Single)
  nameWithType.vb: Track(Of T).GetIntersectingFeatures(List(Of T), Single, Single)
  fullName.vb: RhythmTool.Track(Of T).GetIntersectingFeatures(List(Of T), System.Single, System.Single)
  name.vb: GetIntersectingFeatures(List(Of T), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track<T>.GetIntersectingFeatures
    fullName: RhythmTool.Track<T>.GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track(Of T).GetIntersectingFeatures
    fullName: RhythmTool.Track(Of T).GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetIndex(System.Single)
  isExternal: true
  name: GetIndex(Single)
  nameWithType: Track<T>.GetIndex(Single)
  fullName: RhythmTool.Track<T>.GetIndex(System.Single)
  nameWithType.vb: Track(Of T).GetIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track<T>.GetIndex
    fullName: RhythmTool.Track<T>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track(Of T).GetIndex
    fullName: RhythmTool.Track(Of T).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetPrevIndex(System.Single)
  isExternal: true
  name: GetPrevIndex(Single)
  nameWithType: Track<T>.GetPrevIndex(Single)
  fullName: RhythmTool.Track<T>.GetPrevIndex(System.Single)
  nameWithType.vb: Track(Of T).GetPrevIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetPrevIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track<T>.GetPrevIndex
    fullName: RhythmTool.Track<T>.GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track(Of T).GetPrevIndex
    fullName: RhythmTool.Track(Of T).GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
  commentId: M:RhythmTool.Track`1.GetPrevFeature(System.Single)
  isExternal: true
  name: GetPrevFeature(Single)
  nameWithType: Track<T>.GetPrevFeature(Single)
  fullName: RhythmTool.Track<T>.GetPrevFeature(System.Single)
  nameWithType.vb: Track(Of T).GetPrevFeature(Single)
  fullName.vb: RhythmTool.Track(Of T).GetPrevFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track<T>.GetPrevFeature
    fullName: RhythmTool.Track<T>.GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track(Of T).GetPrevFeature
    fullName: RhythmTool.Track(Of T).GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetNextIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetNextIndex(System.Single)
  isExternal: true
  name: GetNextIndex(Single)
  nameWithType: Track<T>.GetNextIndex(Single)
  fullName: RhythmTool.Track<T>.GetNextIndex(System.Single)
  nameWithType.vb: Track(Of T).GetNextIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetNextIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track<T>.GetNextIndex
    fullName: RhythmTool.Track<T>.GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track(Of T).GetNextIndex
    fullName: RhythmTool.Track(Of T).GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetNextFeature(System.Single)
  commentId: M:RhythmTool.Track`1.GetNextFeature(System.Single)
  isExternal: true
  name: GetNextFeature(Single)
  nameWithType: Track<T>.GetNextFeature(Single)
  fullName: RhythmTool.Track<T>.GetNextFeature(System.Single)
  nameWithType.vb: Track(Of T).GetNextFeature(Single)
  fullName.vb: RhythmTool.Track(Of T).GetNextFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track<T>.GetNextFeature
    fullName: RhythmTool.Track<T>.GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track(Of T).GetNextFeature
    fullName: RhythmTool.Track(Of T).GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIndex(`0)
  commentId: M:RhythmTool.Track`1.GetIndex(`0)
  name: GetIndex(T)
  nameWithType: Track<T>.GetIndex(T)
  fullName: RhythmTool.Track<T>.GetIndex(T)
  nameWithType.vb: Track(Of T).GetIndex(T)
  fullName.vb: RhythmTool.Track(Of T).GetIndex(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track<T>.GetIndex
    fullName: RhythmTool.Track<T>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track(Of T).GetIndex
    fullName: RhythmTool.Track(Of T).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  isExternal: true
  name: GetIntersectingIndex(Single)
  nameWithType: Track<T>.GetIntersectingIndex(Single)
  fullName: RhythmTool.Track<T>.GetIntersectingIndex(System.Single)
  nameWithType.vb: Track(Of T).GetIntersectingIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetIntersectingIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track<T>.GetIntersectingIndex
    fullName: RhythmTool.Track<T>.GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track(Of T).GetIntersectingIndex
    fullName: RhythmTool.Track(Of T).GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Create(System.String)
  commentId: M:RhythmTool.Track`1.Create(System.String)
  isExternal: true
  name: Create(String)
  nameWithType: Track<T>.Create(String)
  fullName: RhythmTool.Track<T>.Create(System.String)
  nameWithType.vb: Track(Of T).Create(String)
  fullName.vb: RhythmTool.Track(Of T).Create(System.String)
  spec.csharp:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track<T>.Create
    fullName: RhythmTool.Track<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track(Of T).Create
    fullName: RhythmTool.Track(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
