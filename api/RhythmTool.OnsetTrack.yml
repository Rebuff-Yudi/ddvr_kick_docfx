### YamlMime:ManagedReference
items:
- uid: RhythmTool.OnsetTrack
  commentId: T:RhythmTool.OnsetTrack
  id: OnsetTrack
  parent: RhythmTool
  children: []
  langs:
  - csharp
  - vb
  name: OnsetTrack
  nameWithType: OnsetTrack
  fullName: RhythmTool.OnsetTrack
  type: Class
  source:
    id: OnsetTrack
    path: ''
    startLine: 4303
  assemblies:
  - cs.temp.dll
  namespace: RhythmTool
  summary: "\nA Track that contains Onset Features.\n"
  example: []
  syntax:
    content: 'public class OnsetTrack : Track<Onset>'
    content.vb: >-
      Public Class OnsetTrack
          Inherits Track(Of Onset)
  inheritance:
  - System.Object
  - RhythmTool.Track
  - RhythmTool.Track{RhythmTool.Onset}
  inheritedMembers:
  - RhythmTool.Track{RhythmTool.Onset}.Item(System.Int32)
  - RhythmTool.Track{RhythmTool.Onset}.count
  - RhythmTool.Track{RhythmTool.Onset}.Add(RhythmTool.Onset)
  - RhythmTool.Track{RhythmTool.Onset}.Remove(RhythmTool.Onset)
  - RhythmTool.Track{RhythmTool.Onset}.Sort
  - RhythmTool.Track{RhythmTool.Onset}.GetFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetIntersectingFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetPrevIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetPrevFeature(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetNextIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetNextFeature(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.GetIndex(RhythmTool.Onset)
  - RhythmTool.Track{RhythmTool.Onset}.GetIntersectingIndex(System.Single)
  - RhythmTool.Track{RhythmTool.Onset}.Create(System.String)
  - RhythmTool.Track.name
  - RhythmTool.Track._name
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: RhythmTool
  commentId: N:RhythmTool
  name: RhythmTool
  nameWithType: RhythmTool
  fullName: RhythmTool
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: RhythmTool.Track
  commentId: T:RhythmTool.Track
  parent: RhythmTool
  name: Track
  nameWithType: Track
  fullName: RhythmTool.Track
- uid: RhythmTool.Track{RhythmTool.Onset}
  commentId: T:RhythmTool.Track{RhythmTool.Onset}
  parent: RhythmTool
  definition: RhythmTool.Track`1
  name: Track<Onset>
  nameWithType: Track<Onset>
  fullName: RhythmTool.Track<RhythmTool.Onset>
  nameWithType.vb: Track(Of Onset)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset)
  name.vb: Track(Of Onset)
  spec.csharp:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.Item(System.Int32)
  commentId: P:RhythmTool.Track{RhythmTool.Onset}.Item(System.Int32)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: Track<Onset>.Item[Int32]
  fullName: RhythmTool.Track<RhythmTool.Onset>.Item[System.Int32]
  nameWithType.vb: Track(Of Onset).Item(Int32)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track<Onset>.Item
    fullName: RhythmTool.Track<RhythmTool.Onset>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track(Of Onset).Item
    fullName: RhythmTool.Track(Of RhythmTool.Onset).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.count
  commentId: P:RhythmTool.Track{RhythmTool.Onset}.count
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.count
  name: count
  nameWithType: Track<Onset>.count
  fullName: RhythmTool.Track<RhythmTool.Onset>.count
  nameWithType.vb: Track(Of Onset).count
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).count
- uid: RhythmTool.Track{RhythmTool.Onset}.Add(RhythmTool.Onset)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.Add(RhythmTool.Onset)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.Add(`0)
  name: Add(Onset)
  nameWithType: Track<Onset>.Add(Onset)
  fullName: RhythmTool.Track<RhythmTool.Onset>.Add(RhythmTool.Onset)
  nameWithType.vb: Track(Of Onset).Add(Onset)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).Add(RhythmTool.Onset)
  spec.csharp:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track<Onset>.Add
    fullName: RhythmTool.Track<RhythmTool.Onset>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track(Of Onset).Add
    fullName: RhythmTool.Track(Of RhythmTool.Onset).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.Remove(RhythmTool.Onset)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.Remove(RhythmTool.Onset)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.Remove(`0)
  name: Remove(Onset)
  nameWithType: Track<Onset>.Remove(Onset)
  fullName: RhythmTool.Track<RhythmTool.Onset>.Remove(RhythmTool.Onset)
  nameWithType.vb: Track(Of Onset).Remove(Onset)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).Remove(RhythmTool.Onset)
  spec.csharp:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track<Onset>.Remove
    fullName: RhythmTool.Track<RhythmTool.Onset>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track(Of Onset).Remove
    fullName: RhythmTool.Track(Of RhythmTool.Onset).Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.Sort
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.Sort
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.Sort
  name: Sort()
  nameWithType: Track<Onset>.Sort()
  fullName: RhythmTool.Track<RhythmTool.Onset>.Sort()
  nameWithType.vb: Track(Of Onset).Sort()
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).Sort()
  spec.csharp:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track<Onset>.Sort
    fullName: RhythmTool.Track<RhythmTool.Onset>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track(Of Onset).Sort
    fullName: RhythmTool.Track(Of RhythmTool.Onset).Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  name: GetFeatures(List<Onset>, Single, Single)
  nameWithType: Track<Onset>.GetFeatures(List<Onset>, Single, Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetFeatures(List<RhythmTool.Onset>, System.Single, System.Single)
  nameWithType.vb: Track(Of Onset).GetFeatures(List(Of Onset), Single, Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetFeatures(List(Of RhythmTool.Onset), System.Single, System.Single)
  name.vb: GetFeatures(List(Of Onset), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track<Onset>.GetFeatures
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track(Of Onset).GetFeatures
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetIntersectingFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetIntersectingFeatures(List{RhythmTool.Onset},System.Single,System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  name: GetIntersectingFeatures(List<Onset>, Single, Single)
  nameWithType: Track<Onset>.GetIntersectingFeatures(List<Onset>, Single, Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetIntersectingFeatures(List<RhythmTool.Onset>, System.Single, System.Single)
  nameWithType.vb: Track(Of Onset).GetIntersectingFeatures(List(Of Onset), Single, Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetIntersectingFeatures(List(Of RhythmTool.Onset), System.Single, System.Single)
  name.vb: GetIntersectingFeatures(List(Of Onset), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track<Onset>.GetIntersectingFeatures
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track(Of Onset).GetIntersectingFeatures
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetIndex(System.Single)
  name: GetIndex(Single)
  nameWithType: Track<Onset>.GetIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetIndex(System.Single)
  nameWithType.vb: Track(Of Onset).GetIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track<Onset>.GetIndex
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track(Of Onset).GetIndex
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetPrevIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetPrevIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetPrevIndex(System.Single)
  name: GetPrevIndex(Single)
  nameWithType: Track<Onset>.GetPrevIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetPrevIndex(System.Single)
  nameWithType.vb: Track(Of Onset).GetPrevIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetPrevIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track<Onset>.GetPrevIndex
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track(Of Onset).GetPrevIndex
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetPrevFeature(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetPrevFeature(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetPrevFeature(System.Single)
  name: GetPrevFeature(Single)
  nameWithType: Track<Onset>.GetPrevFeature(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetPrevFeature(System.Single)
  nameWithType.vb: Track(Of Onset).GetPrevFeature(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetPrevFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track<Onset>.GetPrevFeature
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track(Of Onset).GetPrevFeature
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetNextIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetNextIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetNextIndex(System.Single)
  name: GetNextIndex(Single)
  nameWithType: Track<Onset>.GetNextIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetNextIndex(System.Single)
  nameWithType.vb: Track(Of Onset).GetNextIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetNextIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track<Onset>.GetNextIndex
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track(Of Onset).GetNextIndex
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetNextFeature(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetNextFeature(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetNextFeature(System.Single)
  name: GetNextFeature(Single)
  nameWithType: Track<Onset>.GetNextFeature(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetNextFeature(System.Single)
  nameWithType.vb: Track(Of Onset).GetNextFeature(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetNextFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track<Onset>.GetNextFeature
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track(Of Onset).GetNextFeature
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetIndex(RhythmTool.Onset)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetIndex(RhythmTool.Onset)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetIndex(`0)
  name: GetIndex(Onset)
  nameWithType: Track<Onset>.GetIndex(Onset)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetIndex(RhythmTool.Onset)
  nameWithType.vb: Track(Of Onset).GetIndex(Onset)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetIndex(RhythmTool.Onset)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track<Onset>.GetIndex
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track(Of Onset).GetIndex
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: RhythmTool.Onset
    name: Onset
    nameWithType: Onset
    fullName: RhythmTool.Onset
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.GetIntersectingIndex(System.Single)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.GetIntersectingIndex(System.Single)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  name: GetIntersectingIndex(Single)
  nameWithType: Track<Onset>.GetIntersectingIndex(Single)
  fullName: RhythmTool.Track<RhythmTool.Onset>.GetIntersectingIndex(System.Single)
  nameWithType.vb: Track(Of Onset).GetIntersectingIndex(Single)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).GetIntersectingIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track<Onset>.GetIntersectingIndex
    fullName: RhythmTool.Track<RhythmTool.Onset>.GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track(Of Onset).GetIntersectingIndex
    fullName: RhythmTool.Track(Of RhythmTool.Onset).GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track{RhythmTool.Onset}.Create(System.String)
  commentId: M:RhythmTool.Track{RhythmTool.Onset}.Create(System.String)
  parent: RhythmTool.Track{RhythmTool.Onset}
  definition: RhythmTool.Track`1.Create(System.String)
  name: Create(String)
  nameWithType: Track<Onset>.Create(String)
  fullName: RhythmTool.Track<RhythmTool.Onset>.Create(System.String)
  nameWithType.vb: Track(Of Onset).Create(String)
  fullName.vb: RhythmTool.Track(Of RhythmTool.Onset).Create(System.String)
  spec.csharp:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track<Onset>.Create
    fullName: RhythmTool.Track<RhythmTool.Onset>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track(Of Onset).Create
    fullName: RhythmTool.Track(Of RhythmTool.Onset).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track.name
  commentId: P:RhythmTool.Track.name
  parent: RhythmTool.Track
  name: name
  nameWithType: Track.name
  fullName: RhythmTool.Track.name
- uid: RhythmTool.Track._name
  commentId: F:RhythmTool.Track._name
  parent: RhythmTool.Track
  name: _name
  nameWithType: Track._name
  fullName: RhythmTool.Track._name
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RhythmTool.Track`1
  commentId: T:RhythmTool.Track`1
  parent: RhythmTool
  name: Track<T>
  nameWithType: Track<T>
  fullName: RhythmTool.Track<T>
  nameWithType.vb: Track(Of T)
  fullName.vb: RhythmTool.Track(Of T)
  name.vb: Track(Of T)
  spec.csharp:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RhythmTool.Track`1
    name: Track
    nameWithType: Track
    fullName: RhythmTool.Track
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Item(System.Int32)
  commentId: P:RhythmTool.Track`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: Track<T>.Item[Int32]
  fullName: RhythmTool.Track<T>.Item[System.Int32]
  nameWithType.vb: Track(Of T).Item(Int32)
  fullName.vb: RhythmTool.Track(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track<T>.Item
    fullName: RhythmTool.Track<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: RhythmTool.Track`1.Item(System.Int32)
    name: Item
    nameWithType: Track(Of T).Item
    fullName: RhythmTool.Track(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.count
  commentId: P:RhythmTool.Track`1.count
  name: count
  nameWithType: Track<T>.count
  fullName: RhythmTool.Track<T>.count
  nameWithType.vb: Track(Of T).count
  fullName.vb: RhythmTool.Track(Of T).count
- uid: RhythmTool.Track`1.Add(`0)
  commentId: M:RhythmTool.Track`1.Add(`0)
  name: Add(T)
  nameWithType: Track<T>.Add(T)
  fullName: RhythmTool.Track<T>.Add(T)
  nameWithType.vb: Track(Of T).Add(T)
  fullName.vb: RhythmTool.Track(Of T).Add(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track<T>.Add
    fullName: RhythmTool.Track<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Add(`0)
    name: Add
    nameWithType: Track(Of T).Add
    fullName: RhythmTool.Track(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Remove(`0)
  commentId: M:RhythmTool.Track`1.Remove(`0)
  name: Remove(T)
  nameWithType: Track<T>.Remove(T)
  fullName: RhythmTool.Track<T>.Remove(T)
  nameWithType.vb: Track(Of T).Remove(T)
  fullName.vb: RhythmTool.Track(Of T).Remove(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track<T>.Remove
    fullName: RhythmTool.Track<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Remove(`0)
    name: Remove
    nameWithType: Track(Of T).Remove
    fullName: RhythmTool.Track(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Sort
  commentId: M:RhythmTool.Track`1.Sort
  name: Sort()
  nameWithType: Track<T>.Sort()
  fullName: RhythmTool.Track<T>.Sort()
  nameWithType.vb: Track(Of T).Sort()
  fullName.vb: RhythmTool.Track(Of T).Sort()
  spec.csharp:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track<T>.Sort
    fullName: RhythmTool.Track<T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Sort
    name: Sort
    nameWithType: Track(Of T).Sort
    fullName: RhythmTool.Track(Of T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  commentId: M:RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
  isExternal: true
  name: GetFeatures(List<T>, Single, Single)
  nameWithType: Track<T>.GetFeatures(List<T>, Single, Single)
  fullName: RhythmTool.Track<T>.GetFeatures(List<T>, System.Single, System.Single)
  nameWithType.vb: Track(Of T).GetFeatures(List(Of T), Single, Single)
  fullName.vb: RhythmTool.Track(Of T).GetFeatures(List(Of T), System.Single, System.Single)
  name.vb: GetFeatures(List(Of T), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track<T>.GetFeatures
    fullName: RhythmTool.Track<T>.GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetFeatures(List{`0},System.Single,System.Single)
    name: GetFeatures
    nameWithType: Track(Of T).GetFeatures
    fullName: RhythmTool.Track(Of T).GetFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  commentId: M:RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
  isExternal: true
  name: GetIntersectingFeatures(List<T>, Single, Single)
  nameWithType: Track<T>.GetIntersectingFeatures(List<T>, Single, Single)
  fullName: RhythmTool.Track<T>.GetIntersectingFeatures(List<T>, System.Single, System.Single)
  nameWithType.vb: Track(Of T).GetIntersectingFeatures(List(Of T), Single, Single)
  fullName.vb: RhythmTool.Track(Of T).GetIntersectingFeatures(List(Of T), System.Single, System.Single)
  name.vb: GetIntersectingFeatures(List(Of T), Single, Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track<T>.GetIntersectingFeatures
    fullName: RhythmTool.Track<T>.GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingFeatures(List{`0},System.Single,System.Single)
    name: GetIntersectingFeatures
    nameWithType: Track(Of T).GetIntersectingFeatures
    fullName: RhythmTool.Track(Of T).GetIntersectingFeatures
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetIndex(System.Single)
  isExternal: true
  name: GetIndex(Single)
  nameWithType: Track<T>.GetIndex(Single)
  fullName: RhythmTool.Track<T>.GetIndex(System.Single)
  nameWithType.vb: Track(Of T).GetIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track<T>.GetIndex
    fullName: RhythmTool.Track<T>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(System.Single)
    name: GetIndex
    nameWithType: Track(Of T).GetIndex
    fullName: RhythmTool.Track(Of T).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetPrevIndex(System.Single)
  isExternal: true
  name: GetPrevIndex(Single)
  nameWithType: Track<T>.GetPrevIndex(Single)
  fullName: RhythmTool.Track<T>.GetPrevIndex(System.Single)
  nameWithType.vb: Track(Of T).GetPrevIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetPrevIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track<T>.GetPrevIndex
    fullName: RhythmTool.Track<T>.GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevIndex(System.Single)
    name: GetPrevIndex
    nameWithType: Track(Of T).GetPrevIndex
    fullName: RhythmTool.Track(Of T).GetPrevIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
  commentId: M:RhythmTool.Track`1.GetPrevFeature(System.Single)
  isExternal: true
  name: GetPrevFeature(Single)
  nameWithType: Track<T>.GetPrevFeature(Single)
  fullName: RhythmTool.Track<T>.GetPrevFeature(System.Single)
  nameWithType.vb: Track(Of T).GetPrevFeature(Single)
  fullName.vb: RhythmTool.Track(Of T).GetPrevFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track<T>.GetPrevFeature
    fullName: RhythmTool.Track<T>.GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetPrevFeature(System.Single)
    name: GetPrevFeature
    nameWithType: Track(Of T).GetPrevFeature
    fullName: RhythmTool.Track(Of T).GetPrevFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetNextIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetNextIndex(System.Single)
  isExternal: true
  name: GetNextIndex(Single)
  nameWithType: Track<T>.GetNextIndex(Single)
  fullName: RhythmTool.Track<T>.GetNextIndex(System.Single)
  nameWithType.vb: Track(Of T).GetNextIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetNextIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track<T>.GetNextIndex
    fullName: RhythmTool.Track<T>.GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextIndex(System.Single)
    name: GetNextIndex
    nameWithType: Track(Of T).GetNextIndex
    fullName: RhythmTool.Track(Of T).GetNextIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetNextFeature(System.Single)
  commentId: M:RhythmTool.Track`1.GetNextFeature(System.Single)
  isExternal: true
  name: GetNextFeature(Single)
  nameWithType: Track<T>.GetNextFeature(Single)
  fullName: RhythmTool.Track<T>.GetNextFeature(System.Single)
  nameWithType.vb: Track(Of T).GetNextFeature(Single)
  fullName.vb: RhythmTool.Track(Of T).GetNextFeature(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track<T>.GetNextFeature
    fullName: RhythmTool.Track<T>.GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetNextFeature(System.Single)
    name: GetNextFeature
    nameWithType: Track(Of T).GetNextFeature
    fullName: RhythmTool.Track(Of T).GetNextFeature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIndex(`0)
  commentId: M:RhythmTool.Track`1.GetIndex(`0)
  name: GetIndex(T)
  nameWithType: Track<T>.GetIndex(T)
  fullName: RhythmTool.Track<T>.GetIndex(T)
  nameWithType.vb: Track(Of T).GetIndex(T)
  fullName.vb: RhythmTool.Track(Of T).GetIndex(T)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track<T>.GetIndex
    fullName: RhythmTool.Track<T>.GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIndex(`0)
    name: GetIndex
    nameWithType: Track(Of T).GetIndex
    fullName: RhythmTool.Track(Of T).GetIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  commentId: M:RhythmTool.Track`1.GetIntersectingIndex(System.Single)
  isExternal: true
  name: GetIntersectingIndex(Single)
  nameWithType: Track<T>.GetIntersectingIndex(Single)
  fullName: RhythmTool.Track<T>.GetIntersectingIndex(System.Single)
  nameWithType.vb: Track(Of T).GetIntersectingIndex(Single)
  fullName.vb: RhythmTool.Track(Of T).GetIntersectingIndex(System.Single)
  spec.csharp:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track<T>.GetIntersectingIndex
    fullName: RhythmTool.Track<T>.GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.GetIntersectingIndex(System.Single)
    name: GetIntersectingIndex
    nameWithType: Track(Of T).GetIntersectingIndex
    fullName: RhythmTool.Track(Of T).GetIntersectingIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RhythmTool.Track`1.Create(System.String)
  commentId: M:RhythmTool.Track`1.Create(System.String)
  isExternal: true
  name: Create(String)
  nameWithType: Track<T>.Create(String)
  fullName: RhythmTool.Track<T>.Create(System.String)
  nameWithType.vb: Track(Of T).Create(String)
  fullName.vb: RhythmTool.Track(Of T).Create(System.String)
  spec.csharp:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track<T>.Create
    fullName: RhythmTool.Track<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RhythmTool.Track`1.Create(System.String)
    name: Create
    nameWithType: Track(Of T).Create
    fullName: RhythmTool.Track(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
